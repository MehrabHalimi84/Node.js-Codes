mongoose
یه پکیج برای اتصال 
node => mongoDB
که ساده ترش میکنه 

برای کانکت شدن به مانگو 

mongoose.connect('mongodb://localhost/....)

و برای بهتر شدن کد 
   .then(() => console.log('Connected to MongoDB...'))
    .catch(err => console.error('Could not connect to MongoDB...', err));
    بهش اضافه میکنیم


    schema چیه

    اسکیما یه ابجکته که به ما این توانایی رو میده که اطلاعاتی که میخوایم توی دیتا بیس ذخیره بشن رو تایپ بندی بکنیم 

    یعنی بگیم چه نوع اطلاعاتی اون تو هستش

    const courseSchema = new mongoose.Schema({
    name: String,
    author: String,
    tags: [String],
    date: { type: Date, default: Date.now },
    isPublished: Boolean
});

اینجوری میشه ازش استفاده کنیم


خب 
برای ذخیره حذف اپدیت و خواندن که
میشه همون 
CRUD
از دیتا بیس 
نمیتونیم به تنها از اسکیما استفاده کنیم باید مدل کنیم همون ابجکت رو بعد دیگه میشه خیلی کارا کرد باهاش

const Course = mongoose.model('Course', courseSchema);
این خط اول به صورت یه کلاس اون رو مدل میکنه 
بعد 


const course = new Course({
    name: 'Node.js Course',
    author: 'Mehrab',
    tags: ['node', 'backed'],
    isPublished: true
});

یه ابجکت جدید دررست میکنه 
و بعد دیگه میشه اینو هر کاری کرد 
CRUD


حالا اگه بخوایم دیتا سیو کنیم باید از متد 
save()
استفاده کنیم

const result = await course.save();
و میزاریمش توی یه فانکشنه 
async 
چون نیازه که موازی این کد خونده بشه

جالب اینه اگه اون کد رو که توی 
index.js هست که 
یه کورس جدید درست کردیم رو کامنت کنیم و یه دونه حدید بزنیم و بریم ببینیم توی دیتا بیس اون قبلی پاک نشده و هنوز هست





quering in mongoDB


.find(filter)                    	همه سندهایی که با شرط match می‌شن

.findOne(filter)                 	فقط اولین سند که با شرط match می‌شه

.findById(id)            	        سندی با id خاص

.sort({ field: 1 or -1 })   	    مرتب‌سازی

.limit(n)	                        محدود کردن تعداد نتایج

.skip(n)	                        پرش از اولین n تا (مفید برای pagination)

.select({ field: 1 })            	فقط فیلدهای خاص رو برگردون

.countDocuments(filter)     	    تعداد نتایج مطابق شرط

.or([{condition1}, {condition2}])	شرط OR

.and([{cond1}, {cond2}])	        شرط AND

.exists('field', true/false)	    بررسی وجود فیلد

.where('field').gte(10).lte(20)   	فیلتر با عملگرهای مقایسه‌ای



more fillter


async function getCourses() {
    // eq (equal)
    // ne (not equal)
    // gt (greater than)
    // gte(greater than or equal to)
    // lt (less than)
    // lte(less than or equal to)
    // in
    // nin(not in )


    const courses = await Course
        // .find({ price: { $gt: 10 } })
        // .find({ price: { $gte: 10, lte: 20 } })
        .find({ price: { $in: [10, 20, 30, 50] } })
        .limit(10)
        .sort({ name: 1 })
        .select({ name: 1, tags: 1 });
    console.log(courses);
}

خب ما مثال میزنیم که اگه توی داکیومنتی که ما درست کردیم و گذاشتیمش توی دیتا بیس نیاز داشت به گرفته شدن و نیاز به این بود اونو فیلتر کنیم 
میشه از این فیلتر های بالا کمک بگیریم

که میشه از کومپریسون ها کمک گرفت 
که همشونو بالا کامنت کردیم



logical operator fillters

and 

or


async function getCourses() {
    const courses = await Course
        .find()
        .and([{ author: "Mehrab" }, { isPublished: true }])
        .or()
        .limit(10)
        .sort({ name: 1 })
        .select({ name: 1, tags: 1 });
    console.log(courses);
}

ساختارشون اینجوریه

.and([ {} , {} , {} , ...]);

یعنی یه ارایه که داخل برای شرط ها یه ابجکت بزاریم

.find({ author: 'Mehrab', isPublished: true })
خوده این به تنهایی حکم یه and رو داره

ولی بهتره همون از and 
آستفاده بشه
و وقتیم که استفاده مکنیم باید دیگه داخل پرانتز فایند خالی باشه

Regular Expressions

فیلتر بندی از رشته ها 


async function getCourses() {
    const courses = await Course
        // Starts with Mehrab
        .find({ author: /^Mehrab/ })
        // Ends with Halimi
        .find({ author: /Halimi$/i })
        // Contains Mosh
        .find({ author: /.*mehrab.*/i })
        .limit(10)
        .sort({ name: 1 })
        .select({ name: 1, tags: 1 });
    console.log(courses);
}

.find({ author: /^Mehrab/ })  
اون فیلدی که رشته اش با مهراب شروع شه 

.find({ author: /Halimi$/i })
اون فیلدی که رشته اش با حلیمی تموم شه

.find({ author: /.*mehrab.*/i })
اون فیلدی که رشته اش به نام مهراب هر کاری از رشته باشه (فقط باشه)

i هم حساست به آپرکیس بودن یا نبودنه 
که بزاریش میشه حساس نباش

دیفالت حساس هستش پس

counting ducoument 

به جای متود سلکت میایم متود 
count()
استفاده میکنیم که بهمون نه اون داکیومند هارو بده 
بهمون تعداد اون داکیومنتی هایی که با فیلتر میخونن رو بده 


async function getCourses() {
    const courses = await Course
        .find()
        .and([{ author: "Mehrab" }, { isPublished: true }])
        .or()
        .limit(10)
        .sort({ name: 1 })
        .count()                  // result => 2
    console.log(courses);
}


// Pagination


async function getCourses() {
    const pageNumber = 2;
    const pageSize = 10;

    const courses = await Course
        .find({ author: 'Mehrab', isPublished: true })
        .skip((pageNumber - 1) * pageSize)                 ====> فرمول
        .limit(pageSize)
        .sort({ name: 1 })
        .select({ name: 1, tags: 1 });
    console.log(courses);
}

متود اسکیپ اینجا نقش محدود کننده ریسپانسیو رو داره که میگه

من صفحه اول یه مقدار میخوام دیتا بززارم به نمایش 
بقیه تقسیم بشن به صفحه های دیگه 

حالا با یه فرمول ساده این کار رو انجام میدیم 



نکته 
برای اسنفاده از 
and & or با هم داخله فایند

باید اینجوری کد زد
 .find({
    $and: [{ inStock: true },{ price: { $gt: 30 } },{ discount: { $gte: 1 } },{$or: [{ tags: 'kitchen' },{ tags: 'gaming' }]}]})


update ducoument



// Updating Ducoument (Query First)

✅ ویژگی‌ها:
داکیومنت رو کامل از دیتابیس میاره

تغییرات رو مستقیم روی شیء course انجام می‌دی

بعدش با .save() اون تغییرات رو ذخیره می‌کنی

✅ مزایا:
ولیدیشن‌ها و middlewareها اجرا می‌شن

کنترل بیشتری داری (مثلاً می‌تونی قبل از ذخیره، شرطی بزاری یا منطقی پیاده‌سازی کنی)

مناسب برای وقتی که آپدیت وابسته به وضعیت فعلی داکیومنت هست

❌ معایب:
دو مرحله‌ایه: اول find, بعد save → پس کندتر

کد طولانی‌تره




    // Updating Ducoument (Update First)

ویژگی‌ها:
مستقیماً در یک خط، داکیومنت رو پیدا می‌کنه و آپدیت می‌کنه

سریع‌تره، چون نیاز به بارگیری کامل داکیومنت نداره

گزینه new: true باعث میشه نسخه به‌روز شده‌ی داکیومنت برگرده (اگه نذاری، نسخه قبلش رو برمی‌گردونه)

✅ مزایا:
سریع‌تر (چون فقط یک عملیات در دیتابیس انجام می‌شه)

کد کوتاه‌تر و ساده‌تره

❌ معایب:
ولیدیشن‌ها و Middlewareهای Mongoose روی داکیومنت اجرا نمی‌شن (مثل pre('save'), custom validation)

اگه بخوای قبل یا بعد از تغییر یه لاگ یا پردازش بزنی، سخت‌تره


✅ جمع‌بندی: کِی از کدوم استفاده کنیم؟
از findByIdAndUpdate() استفاده کن:
وقتی آپدیت ساده است

نیاز به middleware یا custom validation نداری

می‌خوای سریع و کوتاه بنویسی

از findById() + save() استفاده کن:
وقتی می‌خوای وضعیت فعلی رو بخونی، بررسی کنی، بعد آپدیت کنی

یا وقتی از Middleware/Validation استفاده می‌کنی (مثلاً برای رمزنگاری، تاییدیه، تغییر زمان آپدیت، و غیره)


update methods

🧩 دسته‌بندی کلی متدهای آپدیت در Mongoose
✅ 1. متدهای مستقیم و سریع (Direct Update)
اینا معمولاً با یک خط، داکیومنت رو پیدا و آپدیت می‌کنن. سریع هستن ولی اعتبارسنجی و middleware اجرا نمی‌شه.

✔ Model.updateOne(filter, updateObj[, options])
فقط یک داکیومنت رو که به شرط می‌خوره آپدیت می‌کنه.

برنمی‌گردونه که چی آپدیت شده (مگر با option).

✔ Model.updateMany(filter, updateObj[, options])
تمام داکیومنت‌هایی که به شرط می‌خورن رو آپدیت می‌کنه.

برای آپدیت انبوه استفاده می‌شه.

✔ Model.findByIdAndUpdate(id, updateObj[, options])
بر اساس id داکیومنت رو پیدا و آپدیت می‌کنه.

اگه { new: true } بزاری، نسخه جدید رو برمی‌گردونه.

✔ Model.findOneAndUpdate(filter, updateObj[, options])
مشابه بالا ولی با شرط filter به‌جای id.

فقط اولین داکیومنت مطابق شرط رو آپدیت می‌کنه.

✅ 2. روش داکیومنت محور (Document-Based Update)
اینا بعد از دریافت داکیومنت با find() یا findById() انجام می‌شن. کُندترن ولی دقیق‌تر و امن‌تر.

✔ doc.save()
وقتی داکیومنت رو با find() می‌گیری و مستقیم فیلدها رو عوض می‌کنی و با save() ذخیره می‌کنی.

تمام اعتبارسنجی‌ها و middlewareها اجرا می‌شن.

✔ doc.set(updateObj)
فقط فیلدهای خاصی رو تنظیم می‌کنه قبل از save() کردن.

✅ 3. متدهای Bulk و خاص (کمتر استفاده‌شده ولی قدرتمند)
✔ Model.bulkWrite(operationsArray)
برای اجرای چند آپدیت/اینزرت/حذف پشت سر هم (مثلاً در یک حلقه).



Delete Docoument


1. متدهای سریع و مستقیم (Direct Delete Methods)
برای حذف مستقیم از دیتابیس بر اساس شرط

✔ Model.deleteOne(filter)
اولین داکیومنتی که به شرط می‌خوره رو حذف می‌کنه.

خروجی شامل تعداد داکیومنت حذف‌شده است.


await Product.deleteOne({ _id: 'id1' });
✔ Model.deleteMany(filter)
تمام داکیومنت‌هایی که شرط رو دارن، حذف می‌کنه.

سریع و مناسب حذف دسته‌جمعی.


await Product.deleteMany({ category: 'old' });
✅ 2. متدهای همراه با بازگرداندن داکیومنت (Find & Delete)
قبل از حذف، داکیومنت رو پیدا می‌کنن و بعد حذف می‌کنن.

✔ Model.findByIdAndDelete(id)
داکیومنت رو با id پیدا می‌کنه و حذف می‌کنه.

خروجی: داکیومنت حذف‌شده رو برمی‌گردونه.


const deleted = await Product.findByIdAndDelete('id1');
console.log(deleted);
✔ Model.findOneAndDelete(filter)
مشابه بالاست ولی بر اساس یک شرط خاص حذف می‌کنه.

خروجی: داکیومنت حذف‌شده.


await Product.findOneAndDelete({ title: 'Old Product' });
✅ 3. روش داکیومنت‌محور (Document-based Delete)
وقتی که قبلاً داکیومنت رو گرفته‌ای و می‌خوای حذفش کنی

✔ doc.remove()
فقط روی داکیومنت‌هایی که قبلاً با find() یا findById() گرفتی قابل اجراست.

مناسب وقتی می‌خوای قبل از حذف، کارهای دیگه هم انجام بدی (یا middleware اجرا بشه).


const product = await Product.findById(id);
await product.remove();
✅ 4. متد جدیدتر: delete() (روی Document)
در نسخه‌های جدید Mongoose اضافه شده، شبیه remove() عمل می‌کنه.


const product = await Product.findById(id);
await product.delete();  // یا await product.deleteOne(); 
 


 Validation

یکی از بیسیک ترین ولیدیشن‌های خوده مانگو اینه
 name : { type : String , required : true}  ;      =============>    باید حتما name وجود داشته باشه خالی نباشه 

 ما کلان هم از Joi هم ماله خوده مانگو استفاده میکنیم

 و دیگه از این به بعد async functionهامون

 به دو دسته ی 
 try {

 }
 catch (err ){

 }
 تقسیم میشه 



  function() { return this.isPublished }    ============================> وابسته بودن به یه فیلد دیگه 
                                                                        تا (isPublished === true) نباشه وجود نباید داشته باشه



 enum: ['web', 'mobile', 'network']        =============================>   این میشه وروردی حتما باید یکی از این رشته ها باشه که تو این ارایه هست


 Custom Validator

  tags: {
        type: Array,
        validate: {
            validator: function (v) {
                return v && v.length > 0;
            },
            message: 'A course should have at least one tag' // message: props => `Invalid tags: "${props.value}". You must provide at least one tag.` (better code)
        }
    }

    اینجا ما خودمون یه ولیدیتور درست میکنیم 

همه ولیدیتور ها ساخته شدن از یه ولیدیتور و مسیج اون ولیدیتور وقتی به ارور میخوره 

پس اینجا هم دو تا پرامتر داره 
message & validator

نکته اینه که 
required : true ;
نداره اینجا 
 type: Array 
 این همون کارو میکنه وقتی ارایه ای وجود نداشته باشه یا null باشه




 Async Valodators

اولا که فقط توی custom validator ها هست
چون built in ها خودشون دارن 

 tags: {
        type: Array,
        validate: {
            validator: async function (v) {
                await new Promise(resolve => setTimeout(resolve, 3000));
                return v && v.length > 0;
            },
            message: 'A course should have at least one tag'
        }
    },

    مثله این که قبلا با callback هم کار میکرده 
    ولی الان با Promise & async await 


Validation Errors 

وقتی چندید ارور داشته باشیم با یه 
catch ساده کار جمع نمی‌شه

باید یه ساحتار خوب داشته باشیم 

  catch (err) {
    for (let field in err.errors) {
        console.log(err.errors[field].message);
    }
}

با این همه ارور ها معلوم میشه یا هر کدوم با اسکیما مشابه نباشه





More Schema validation option


get: v => Math.round(v)           ==============> هر عددی رو بگیره از دیتا بیس اونو گرد میکنه رو به بالا

set: v => Math.round(v)           ==============>  هر عددی رو بگیره از دیتا بیس اونو گرد میکنه رو به پایین

trim: true                        ==============>  با اسپیس های چپ راست رشته کار داره اونارو حذف میکنه بعد خروجی میده

lowercase: true                   ==============> اینارم که هیچی

uppercase: true                   ==============> اینارم که هیچی